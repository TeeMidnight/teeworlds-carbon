name: Build

on: [push, pull_request]

jobs:
  build-cmake:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest]
        include:
        - os: ubuntu-latest
          cmake-args: -G Ninja
          package-file: "*-linux_x86_64.tar.xz"
          env:
            CFLAGS: -Wdeclaration-after-statement -Werror
            CXXFLAGS: -Werror
        - os: macOS-latest
          cmake-args: -G Ninja
          package-file: "*-macos.dmg"
          env:
            CFLAGS: -Wdeclaration-after-statement -Werror
            CXXFLAGS: -Werror

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Checkout SDL3
      if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macOS')
      uses: actions/checkout@v4
      with:
        repository: libsdl-org/SDL
        ref: 68bfcb6c5419f51104e74e72ea0f8d405a4615b0
        path: ./SDL

    - name: Prepare Linux
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update -yy
        sudo apt-get install build-essential git cmake libasound2-dev libpulse-dev libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libwayland-dev libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libibus-1.0-dev libdbus-1-dev libudev-dev libinput-dev libts-dev libjpeg-dev libwebp-dev -y
        sudo apt-get install pkg-config libcurl4-openssl-dev libfreetype6-dev cmake ninja-build -y
        cd SDL
        cmake . -DCMAKE_BUILD_TYPE=Release
        sudo make install

    - name: Prepare MacOS
      if: contains(matrix.os, 'macOS')
      run: |
        brew update || true
        sudo rm -rf /Library/Developer/CommandLineTools
        cd SDL
        cmake . -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13
        cmake --build .
        sudo cmake --install .

    - name: Build in debug mode
      env: ${{ matrix.env }}
      run: |
        mkdir debug
        cd debug
        ${{ matrix.cmake-path }}cmake --version
        ${{ matrix.cmake-path }}cmake ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=Debug -Werror=dev -DDOWNLOAD_GTEST=ON -DDEV=ON -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG=. ..
        ${{ matrix.cmake-path }}cmake --build . --config Debug ${{ matrix.build-args }} --target everything
    - name: Test debug
      run: |
        cd debug
        ${{ matrix.cmake-path }}cmake --build . --config Debug ${{ matrix.build-args }} --target run_tests
    - name: Run debug server
      env: ${{ matrix.env }}
      run: |
        cd debug
        ./Carbon-Server shutdown

    - name: Build in release mode
      env: ${{ matrix.env }}
      run: |
        mkdir release
        cd release
        ${{ matrix.cmake-path }}cmake ${{ matrix.cmake-args }} -DCMAKE_BUILD_TYPE=Release -Werror=dev -DDOWNLOAD_GTEST=ON -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE=. ..
        ${{ matrix.cmake-path }}cmake --build . --config Release ${{ matrix.build-args }} --target everything
    - name: Test release
      run: |
        cd release
        ${{ matrix.cmake-path }}cmake --build . --config Release ${{ matrix.build-args }} --target run_tests
    - name: Run release server
      env: ${{ matrix.env }}
      run: |
        cd release
        ./Carbon-Server shutdown

    - name: Package
      run: |
        cd release
        ${{ matrix.cmake-path }}cmake --build . --config Release ${{ matrix.build-args }} --target package_default
        mkdir artifacts
        mv ${{ matrix.package-file }} artifacts

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: teeworlds-${{ matrix.os }}
        path: release/artifacts